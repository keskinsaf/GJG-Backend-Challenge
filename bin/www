#!/usr/bin/env node

/**
 * Module dependencies.
 */
require("dotenv").config();
const app = require('../app');
const debug = require('debug')('gj-games:server');
const http = require('http');
const mongoose = require('mongoose');


/**
 * Normalize a port into a number, string, or false.
 */
const normalizePort = (val) => {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
};

/**
 * Event listener for HTTP server "error" event.
 */
const onError = (error, port) => {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
};

/**
 * Event listener for HTTP server "listening" event.
 */
const onListening = (server) => {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
};

const connectDb = () => {
    const {DB_URL, DB_PORT, DB_NAME, DB_USERNAME, DB_PASSWORD} = process.env;
    // console.log(process.env);
    // const connectStr = `mongodb://${DB_URL}:${DB_PORT}/${DB_NAME}`;
    const connectStr = `mongodb://${DB_USERNAME}:${DB_PASSWORD}@${DB_URL}:${DB_PORT}/${DB_NAME}`;
    return mongoose.connect(connectStr, {useNewUrlParser: true, useUnifiedTopology: true});
};

const initServer = () => {
    /**
     * Get port from environment and store in Express.
     */
    const port = normalizePort(process.env.SERVER_PORT || '3000');

    /**
     * Listen on provided port, on all network interfaces.
     */
    app.set('port', port);

    /**
     * Create HTTP server.
     */
    const server = http.createServer(app);
    server.listen(port);
    server.on('error', (error) => onError(error, port));
    server.on('listening', () => onListening(server));
};

(async () => {
    try {
        await connectDb();
        initServer();
    } catch (e) {
        console.log(e);
    }
})();